[chapter quince_sqlite
    [quickbook 1.6]
]

[section:constructor The `quince_sqlite::database` constructor]

The `quince_sqlite` library's /application/ program interface (API) is very small, because almost all calls into `quince_sqlite` are made by quince, not by application code.

In fact, application code only mentions one of `quince_sqlite`'s entry-points: the `quince_sqlite::database` constructor. After that, the application asks /quince/ to create tables, it asks /quince/ to build and execute queries, manipulate data, etc. All the while, behind the scenes, references to the `quince_sqlite::database` object are being passed via constructors from tables to queries to value mappers, and so on, so quince always knows which backend library to use, and it makes frequent use of quince_sqlite functions that are not part of its API.

With that in mind, I present the complete API of quince_sqlite: the `quince_sqlite::database` constructor.

It is available via:

    #include <quince_sqlite/database.h>

and its prototype is:

    database(
        std::string filename,
        bool may_write = true,
        bool mutex = true,
        bool share_cache = true,
        boost::optional<std::string> vfs_module_name = boost::none,
        boost::optional<const quince::mapping_customization &> customization_for_db = boost::none,
        const std::map<std::string, boost::filesystem::path> &attachable_database_filenames =
            std::map<std::string, boost::filesystem::path>()
    );

Most of the arguments are information that quince_sqlite will use each time it creates a connection to the database:

* `filename` is the UTF-8 name of the file that holds that database.
* If `may_write` is true, then the database is opened for writing if the operating system allows it. In any case it is opened for reading, if the operating system allows it.
* If `mutex` is true, then the connection opens in the serialized [@http://www.sqlite.org/threadsafe.html threading mode]; otherwise it opens in the multi-thread threading mode.
* If `share_cache` is true then the connection can used [@http://www.sqlite.org/sharedcache.html shared cache mode], otherwise it does not participate in shared cache mode.
* If `vfs_module_name`, if supplied, it is the name of an [@http://www.sqlite.org/c3ref/vfs.html `sqlite_vfs`] object that defines the the OS interface that the new connection will use. If it is not supplied then sqlite provides a default `sqlite_vfs` object.

[#filename_map]
`filename_map` is a map to translate attached database names, as used as the first part of [link binomen two-part quince table names], into the names of actual files that hold those databases. Any name that cannot be found in the table will be used as the filename without any translation.

`customization_for_db` is used to deploy custom mappings throughout the database, as described [link custom.deployment.database here].

If you are setting custom mappings for the database, or if you intend to add custom mappings for any tables in the database, then you need to read the rest of this chapter. Otherwise your study of the quince_sqlite library is complete.

[endsect]

[section:basic Basic conversions]

The following table lists the C++ types for which quince_sqlite provides [link basic_conversions basic conversions]. So these are the types [~T] for which quince_sqlite allows [link direct_mapper `direct_mapper<`[~T]`>`]. The table also shows the SQL types to which they are converted.

[table
[[C++ mapped type][SQL type from quince_sqlite's basic conversion]]
[[`int64_t`][=INTEGER=]]
[[`serial`][=INTEGER=]]
[[`double`][=REAL=]]
[[`std::string`][=TEXT=]]
[[`std::vector<uint8_t>`][=BLOB=]]
]

[endsect]

[section:mappers Default mappers]

The following table shows the concrete mapper classes that quince_sqlite will use for each of the polymorphically mapped types, if you don't customize. (The various concrete mapper classes are described [link custom.predefined here].)

[table
[[C++ mapped type][quince_sqlite's default concrete mapper class]]
[[`bool`][`numeric_cast_mapper<bool, direct_mapper<int64_t>>`]]
[[`int8_t`][`numeric_cast_mapper<int8_t, direct_mapper<int64_t>>`]]
[[`int16_t`][`numeric_cast_mapper<int16_t, direct_mapper<int64_t>>`]]
[[`int32_t`][`numeric_cast_mapper<int32_t, direct_mapper<int64_t>>`]]
[[`int64_t`][`direct_mapper<int64_t>`]]
[[`float`][`numeric_cast_mapper<float, direct_mapper<double>>`]]
[[`double`][`direct_mapper<double>`]]
[[`uint8_t`][`numeric_cast_mapper<uint8_t, direct_mapper<int64_t>>`]]
[[`uint16_t`][`numeric_cast_mapper<uint16_t, direct_mapper<int64_t>>`]]
[[`uint32_t`][`numeric_cast_mapper<uint32_t, direct_mapper<int64_t>>`]]
[[`uint64_t`][`reinterpret_cast_mapper<uint64_t, direct_mapper<int64_t>, uint64_t(0x8000000000000000)>`]]
[[`std::string`][`direct_mapper<std::string>`]]
[[`std::vector<uint8_t>`][`direct_mapper<std::vector<uint8_t>>`]]
[[`serial`][`serial_mapper`]]
]

[endsect]